name: CI

on:
  push:
    branches:
      - main
      - 'releases/*'
  pull_request:
    branches:
      - '*'

env:
  ORG_GRADLE_PROJECT_junitBuildCacheUsername: ${{ secrets.BUILD_CACHE_USERNAME }}
  ORG_GRADLE_PROJECT_junitBuildCachePassword: ${{ secrets.BUILD_CACHE_PASSWORD }}
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    container: ghcr.io/junit-team/build
    steps:
    - uses: actions/checkout@v2
      with:
        # Codecov needs fetch-depth > 1
        fetch-depth: 2
    - name: Cache Gradle wrapper and dependencies
      uses: actions/cache@v2
      with:
        path: |
          /root/.gradle/caches/
          /root/.gradle/wrapper/dists
        key: test-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle.properties', 'gradle/**', 'buildSrc/src/main/**') }}
        restore-keys: |
          test-${{ runner.os }}-gradle-
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: /root/.m2/repository
        key: test-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          test-${{ runner.os }}-maven-
    - name: Test and coverage
      env:
        ORG_GRADLE_PROJECT_enableTestDistribution: true
      run: |
        ./gradlew --version
        ./gradlew javaToolchains -Porg.gradle.java.installations.auto-download=false
        ./gradlew --no-parallel --stacktrace -Dplatform.tooling.support.tests.enabled=true -PenableJaCoCo -Porg.gradle.java.installations.auto-download=false build jacocoRootReport
    - name: Upload Test Distribution trace files
      uses: actions/upload-artifact@v2
      with:
        name: Test Distribution trace files
        path: '**/build/test-results/*/trace.json'
    - name: Upload to Codecov.io
      uses: codecov/codecov-action@v1

  windows:
    name: Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Cache Gradle wrapper and dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/
          ~/.gradle/wrapper/dists
        key: test-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle.properties', 'gradle/**', 'buildSrc/src/main/**') }}
        restore-keys: |
          test-${{ runner.os }}-gradle-
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: test-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          test-${{ runner.os }}-maven-
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Prepare JDK8 env var
      shell: bash
      run: echo "JDK8=$JAVA_HOME" >> $GITHUB_ENV
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16
    - name: Prepare JDK16 env var
      shell: bash
      run: echo "JDK16=$JAVA_HOME" >> $GITHUB_ENV
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Test
      shell: bash
      run: |
        ./gradlew --version
        ./gradlew javaToolchains -Porg.gradle.java.installations.auto-download=false
        ./gradlew --no-parallel --stacktrace -Dplatform.tooling.support.tests.enabled=true -Porg.gradle.java.installations.auto-download=false build
        ./gradlew --stop

  mac:
    name: Mac OS
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Cache Gradle wrapper and dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/
          ~/.gradle/wrapper/dists
        key: test-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle.properties', 'gradle/**', 'buildSrc/src/main/**') }}
        restore-keys: |
          test-${{ runner.os }}-gradle-
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: test-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          test-${{ runner.os }}-maven-
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Prepare JDK8 env var
      shell: bash
      run: echo "JDK8=$JAVA_HOME" >> $GITHUB_ENV
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16
    - name: Prepare JDK16 env var
      shell: bash
      run: echo "JDK16=$JAVA_HOME" >> $GITHUB_ENV
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: 'Test'
      run: |
        ./gradlew --version
        ./gradlew javaToolchains -Porg.gradle.java.installations.auto-download=false
        ./gradlew --no-parallel --stacktrace -Dplatform.tooling.support.tests.enabled=true -Porg.gradle.java.installations.auto-download=false build

  publish_artifacts:
    name: Publish Snapshot Artifacts
    needs: linux
    runs-on: ubuntu-latest
    container: ghcr.io/junit-team/build
    if: github.event_name == 'push' && github.repository == 'junit-team/junit5' && (startsWith(github.ref, 'refs/heads/releases/') || github.ref == 'refs/heads/main')
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Cache Gradle wrapper and dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/
          ~/.gradle/wrapper/dists
        key: assemble-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle.properties', 'gradle/**', 'buildSrc/src/main/**') }}
        restore-keys: |
          assemble-${{ runner.os }}-gradle-
    - name: Publish
      env:
        ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}
        ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
      run: |
        ./gradlew javaToolchains -Porg.gradle.java.installations.auto-download=false
        ./gradlew publish -x check -Porg.gradle.java.installations.auto-download=false

  update_documentation:
    name: Update Snapshot Documentation
    needs: linux
    runs-on: ubuntu-latest
    container: ghcr.io/junit-team/build
    if: github.event_name == 'push' && github.repository == 'junit-team/junit5' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Cache Gradle wrapper and dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/
          ~/.gradle/wrapper/dists
        key: assemble-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle.properties', 'gradle/**', 'buildSrc/src/main/**') }}
        restore-keys: |
          assemble-${{ runner.os }}-gradle-
    - name: Upload Documentation
      env:
        GRGIT_USER: ${{ secrets.GH_TOKEN }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      run: ./src/publishDocumentationSnapshotOnlyIfNecessary.sh
